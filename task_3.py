"""
Задание 3.

Для этой задачи
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

def dict_():
    dict_company = {
        "Sony": 1000000,
        "Mitsubishi": 1020000,
        "Panasonic": 152000,
        "LG": 652354,
        "Samsung": 1598762
    }
    return dict_company


######################################################################################
sorted_values = sorted(dict_().values())  # O(n*logn)
new_sorted_list = {}  # O(1)
for i in sorted_values:  # O(n)
    for j in dict_().keys():  # O(n^2)
        if dict_()[j] == i:  # O(1)
            new_sorted_list[j] = dict_()[j]  # O(1)
            break
top3 = (list(new_sorted_list.items()))[2:]  # O(n)
for k in enumerate(top3[::-1], 1):  # O(n)
    print(k)
# итоговая сложность О(n^2)


#######################################################################################
print()
sorted_pairs = sorted(list(dict_().items()), key=lambda pair: pair[1], reverse=True)[:3]  # O(n*logn)
for g in enumerate(sorted_pairs, 1):  # O(n)
    print(g)
# итоговая сложность О(n*logn)
# сложность примера 2 ниже сложности примера 1, т.к. О(n^2) сложнее O(n*logn)
